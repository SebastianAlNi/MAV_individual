---------- NOTES ----------

To Do:
- Recalculate runtime
- Redo diagrams
	- step 0.1 gives partially too unaccurate results
	- step 0.06 gives better runtime and also good results
- mt to MT
- Setup git
- Comment code
- Make everything look nice and easily reproducable
- Add number of scaling steps as variable parameter

Done:

Approaches:

- SIFT (non-free)

- Gate template image / Template Matching
	- Template of entire gate
	- Template of chess pattern
	- Limitations:
		- Rotated gate, small rotation due to image distortion is okay

- Find gate in image

- Deep neural network
	- Learning not good with OpenCV
	- Ask Elsa

- Hough Lines
	- Detect vertical lines
	- connect them
	- exclude lines without connections
	- add width of gate dependent on overall size (corresponding to distance)

ROC Curve:
- IoU not possible?
	- Only one rectangle per image is detected
	- So it's either true or false, therefore true = (1-false)
	- True positive ratio can never become 1 because:
		- If nothing is detected, it will be zero (bottom left)
		- If the entire image is detected, it will also become zero (bottom right)
		- It becomes only one, if all detections are within threshold, but then the false positive rate is not one
		-> Works only if several polygons are detected wout of which many can be considered false negatives (???)
		- My algorithm always only detects one polygon -> there is no "average (absolute) number of false positives per image"
	- Doe false positive ratio always have to go all the way to one?

- Compare polyongs
- Compare filled poygons

To Do:
    - Only allow reasonable aspect ratios:
        - Check aspect ratio at corner distribution or at extrapolation?
    - Add second, horizontal chess template
    - Sensitivity study through different ROC curves, parameters:
        - Threshold
        - Scale step
        - (min, max scale)
        - ratio bar to gate size
        - Rejection parameter m
        - Original image scale
        - Template Matching method
    - Way faster if original image is scaled down
    - Adapt polygon size, make smaller so that it is closer to the ground truth
    - Autmatically create Output folder in original image directory, if it doesn't exist yet
    
Done:
    - Filter single matches far away: reject_outliers
    - Filter matches from gates behind: Only use min/max corner matches
    - Parallelize -> global corner won't work
